# The FW_PACKAGE_MAINTAINER field is populated with the environment
# variable FW_PACKAGE_DEFAULT_MAINTAINER if non-empty at init time

ERLANG_VERSION=$(erl -eval 'io:format("~s", [ erlang:system_info(otp_release) ]), halt().'  -noshell)
BUILD_PREFIX=erlang-$(perl -e '$ARGV[0] =~ m/^(R?\d+[A-Z]*)/i and print lc($1) or die "$ARGV[0]";' "$ERLANG_VERSION")-

FW_PACKAGE_NAME="${BUILD_PREFIX}ox-thrift"
FW_PACKAGE_VERSION="0.9.0"
FW_PACKAGE_MAINTAINER="david.hull <david.hull@openx.com>"
FW_PACKAGE_ORGANIZATION=${FW_PACKAGE_ORGANIZATION-"unknown"}
FW_PACKAGE_PACKAGER=${FW_PACKAGE_PACKAGER-"david.hull <david.hull@openx.com>"}
FW_PACKAGE_SHORT_DESCRIPTION="Thrift client/server library for Erlang."
FW_PACKAGE_DESCRIPTION="Thrift client/server library for Erlang."
FW_PACKAGE_ARCHITECTURE_DEPENDENT="1"

# Dependency information.  The native syntax corresponds to Debian,
# http://www.debian.org/doc/debian-policy/ch-relationships.html
# Section 7.1 "Syntax of Relationship Fields"
# 
# For other packaging systems, the syntax is translated for you.

FW_PACKAGE_DEPENDS=""
FW_PACKAGE_CONFLICTS="ox-thrift" # (rpm)
FW_PACKAGE_PROVIDES=""
FW_PACKAGE_REPLACES="ox-thrift" # (deb)
FW_PACKAGE_SUGGESTS=""

FW_PACKAGE_BUILD_DEPENDS="${BUILD_PREFIX}ranch (>= 0.8.0)"
FW_PACKAGE_BUILD_CONFLICTS=""

# dupload is used for submitting debian packages to a package archive
# The FW_DUPLOAD_ARGS field is populated with the environment variable
# FW_DEFAULT_DUPLOAD_ARGS if non-empty at init time

FW_DUPLOAD_ARGS=${FW_DUPLOAD_ARGS-"-q"}

# scp+createrepo is used for submitting rpm packages to a package archive
# The FW_RPM_REPO_USER, FW_RPM_REPO_HOST, FW_RPM_REPO_BASEDIR,
# and FW_RPM_POSTCREATEREPO_COMMANDS variables are populated with 
# FW_RPM_REPO_USER_DEFAULT, FW_RPM_REPO_HOST_DEFAULT, 
# FW_RPM_REPO_BASEDIR_DEFAULT, and FW_RPM_POSTCREATEREPO_COMMANDS_DEFAULT
# respectively if non-empty at init time

FW_RPM_REPO_USER=${FW_RPM_REPO_USER-"yumrepo"}
FW_RPM_REPO_HOST=${FW_RPM_REPO_HOST-"codex.pasadena.openx.org"}
FW_RPM_REPO_BASEDIR=${FW_RPM_REPO_BASEDIR-""}
FW_RPM_CREATEREPO_ARGS=${FW_RPM_CREATEREPO_ARGS-"-q --database"}

# this variable controls whether createrepo is run incrementally (--update).
# possible settings are yes (always do it), no (never do it), and 
# auto (do it if the repository has been previously initialized)
FW_RPM_CREATEREPO_INCREMENTAL=${FW_RPM_CREATEREPO_INCREMENTAL-"auto"}

# these commands will be run after a successful createrepo run
FW_RPM_POSTCREATEREPO_COMMANDS=${FW_RPM_POSTCREATEREPO_COMMANDS-"true"}
# here's a suggestion:
# FW_RPM_POSTCREATEREPO_COMMANDS="gpg --detach-sign --armor repodata/repomd.xml" 
# these commands will be run after certain actions
FW_POST_RELEASE_COMMANDS=${FW_POST_RELEASE_COMMANDS-"true"}
# for instance if using a remote git repo this might be
# FW_POST_RELEASE_COMMANDS="(git ls-remote 1&>2 && git push && git push --tags) ; exit 0"


# uncomment and set manually if you want the application name to be different
# from FW_PACKAGE_NAME, application name must consist of characters [a-zA-Z_]
FW_ERL_APP_NAME="ox_thrift"

# uncomment and set manually if autodetection of modules is incorrect.
# should be an erlang expression which evaluates to a list.
# FW_ERL_APP_MODULES="[]"

# uncomment and set manually if autodetection of registered processes is incorrect
# should be an erlang expression which evaluates to a list.
# FW_ERL_APP_REGISTERED="[]"

# uncomment and set manually if autodetection of start module is incorrect
# should be an erlang expression which evaluates to an atom.
# FW_ERL_APP_START_MODULE=""

# uncomment to define start args to the start module.  should be an erlang
# expression which evaluates to a list.  this only has an effect if
# FW_ERL_APP_START_MODULE is set manually.
# FW_ERL_APP_START_ARGS="[]"

# uncomment if the module line being generated is incorrect and you want 
# to override it.
# FW_ERL_APP_MOD_LINE="{ mod, { $FW_ERL_APP_START_MODULE, $FW_ERL_APP_START_ARGS } }"

# uncomment to define the application environment variables. should be an 
# erlang expression which evaluates to a list.
# FW_ERL_APP_ENVIRONMENT="[]"

# uncomment to indicate additional OTP applications (besides kernel and stdlib)
# that this application depends upon.  should be an erlang expression which 
# evaluates to a list.
# FW_ERL_PREREQ_APPLICATIONS_EXTRA="[]"

# uncomment to add arbitrary extra content to the app file, e.g., an
# included application directive.  should be an erlang expression which 
# evaluates to a proplist (list of key-value tuple pairs).
# FW_ERL_APP_EXTRA="[]"

# uncomment and set to specify additional pkg-config packages on the Requires:
# line of the generated .pc file
# FW_PKGCONFIG_REQUIRES_EXTRA=""

# uncomment and set to specify additional content for the Libs:
# line of the generated .pc file
# FW_PKGCONFIG_LIBS_EXTRA=""

# uncomment and set to specify additional content for the Cflags:
# line of the generated .pc file
# FW_PKGCONFIG_CFLAGS_EXTRA=""

# uncomment and set to add arbitrary additional content to the.
# generated .pc file
# FW_PKGCONFIG_EXTRA=""
